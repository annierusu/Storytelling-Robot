# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qt_nuitrack_app/HandInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HandInfo(genpy.Message):
  _md5sum = "ebda9d77d8f24f2a507d651777ac1949"
  _type = "qt_nuitrack_app/HandInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#std_msgs/Header header
int32 id
#The normalized projective (x, y) coordinate of the right hand
float32[] right_projection
#The (x,y,z) coordinate of the right hand in the world system.
float32[] right_real
bool right_click
int32 right_pressure
#The normalized projective (x, y) coordinate of the left hand
float32[] left_projection
#The (x,y,z) coordinate of the left hand in the world system.
float32[] left_real
bool left_click
int32 left_pressure
"""
  __slots__ = ['id','right_projection','right_real','right_click','right_pressure','left_projection','left_real','left_click','left_pressure']
  _slot_types = ['int32','float32[]','float32[]','bool','int32','float32[]','float32[]','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,right_projection,right_real,right_click,right_pressure,left_projection,left_real,left_click,left_pressure

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HandInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.right_projection is None:
        self.right_projection = []
      if self.right_real is None:
        self.right_real = []
      if self.right_click is None:
        self.right_click = False
      if self.right_pressure is None:
        self.right_pressure = 0
      if self.left_projection is None:
        self.left_projection = []
      if self.left_real is None:
        self.left_real = []
      if self.left_click is None:
        self.left_click = False
      if self.left_pressure is None:
        self.left_pressure = 0
    else:
      self.id = 0
      self.right_projection = []
      self.right_real = []
      self.right_click = False
      self.right_pressure = 0
      self.left_projection = []
      self.left_real = []
      self.left_click = False
      self.left_pressure = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.right_projection)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_projection))
      length = len(self.right_real)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.right_real))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.right_click, _x.right_pressure))
      length = len(self.left_projection)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_projection))
      length = len(self.left_real)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.left_real))
      _x = self
      buff.write(_get_struct_Bi().pack(_x.left_click, _x.left_pressure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_projection = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_real = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.right_click, _x.right_pressure,) = _get_struct_Bi().unpack(str[start:end])
      self.right_click = bool(self.right_click)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_projection = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_real = s.unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.left_click, _x.left_pressure,) = _get_struct_Bi().unpack(str[start:end])
      self.left_click = bool(self.left_click)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.right_projection)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_projection.tostring())
      length = len(self.right_real)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.right_real.tostring())
      _x = self
      buff.write(_get_struct_Bi().pack(_x.right_click, _x.right_pressure))
      length = len(self.left_projection)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_projection.tostring())
      length = len(self.left_real)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.left_real.tostring())
      _x = self
      buff.write(_get_struct_Bi().pack(_x.left_click, _x.left_pressure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_projection = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.right_real = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 5
      (_x.right_click, _x.right_pressure,) = _get_struct_Bi().unpack(str[start:end])
      self.right_click = bool(self.right_click)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_projection = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.left_real = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 5
      (_x.left_click, _x.left_pressure,) = _get_struct_Bi().unpack(str[start:end])
      self.left_click = bool(self.left_click)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
