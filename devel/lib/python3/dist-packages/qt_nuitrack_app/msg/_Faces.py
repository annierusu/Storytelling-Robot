# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qt_nuitrack_app/Faces.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import qt_nuitrack_app.msg

class Faces(genpy.Message):
  _md5sum = "20dfb5db1e90db4dafd45bc663893505"
  _type = "qt_nuitrack_app/Faces"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#std_msgs/Header header
FaceInfo[] faces

================================================================================
MSG: qt_nuitrack_app/FaceInfo
#std_msgs/Header header
int32 id
string gender
int32 age_years
string age_type
float64 emotion_neutral
float64 emotion_angry
float64 emotion_happy
float64 emotion_surprise
#normalized screen coordinates of a face rectangle in the image (x, y, w, h)
float64[] rectangle
#normalized coordinates of the center of a person’s left eye (x,y)
float64[] left_eye
#normalized coordinates of the center of a person’s right eye (x,y)
float64[] right_eye
#face orientation angles in degrees (yaw, pitch, roll)
float64[] angles
"""
  __slots__ = ['faces']
  _slot_types = ['qt_nuitrack_app/FaceInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       faces

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Faces, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.faces is None:
        self.faces = []
    else:
      self.faces = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.faces)
      buff.write(_struct_I.pack(length))
      for val1 in self.faces:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.gender
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.age_years
        buff.write(_get_struct_i().pack(_x))
        _x = val1.age_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.emotion_neutral, _x.emotion_angry, _x.emotion_happy, _x.emotion_surprise))
        length = len(val1.rectangle)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.rectangle))
        length = len(val1.left_eye)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.left_eye))
        length = len(val1.right_eye)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.right_eye))
        length = len(val1.angles)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.angles))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.faces is None:
        self.faces = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faces = []
      for i in range(0, length):
        val1 = qt_nuitrack_app.msg.FaceInfo()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gender = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gender = str[start:end]
        start = end
        end += 4
        (val1.age_years,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.age_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.age_type = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.emotion_neutral, _x.emotion_angry, _x.emotion_happy, _x.emotion_surprise,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rectangle = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.left_eye = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.right_eye = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.angles = s.unpack(str[start:end])
        self.faces.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.faces)
      buff.write(_struct_I.pack(length))
      for val1 in self.faces:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.gender
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.age_years
        buff.write(_get_struct_i().pack(_x))
        _x = val1.age_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.emotion_neutral, _x.emotion_angry, _x.emotion_happy, _x.emotion_surprise))
        length = len(val1.rectangle)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.rectangle.tostring())
        length = len(val1.left_eye)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.left_eye.tostring())
        length = len(val1.right_eye)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.right_eye.tostring())
        length = len(val1.angles)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.angles.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.faces is None:
        self.faces = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faces = []
      for i in range(0, length):
        val1 = qt_nuitrack_app.msg.FaceInfo()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gender = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.gender = str[start:end]
        start = end
        end += 4
        (val1.age_years,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.age_type = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.age_type = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.emotion_neutral, _x.emotion_angry, _x.emotion_happy, _x.emotion_surprise,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rectangle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.left_eye = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.right_eye = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.faces.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
