# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qt_nuitrack_app/Skeletons.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import qt_nuitrack_app.msg

class Skeletons(genpy.Message):
  _md5sum = "c9e6a0abe2b44381a0de593ee0c2c308"
  _type = "qt_nuitrack_app/Skeletons"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#std_msgs/Header header
SkeletonInfo[] skeletons

================================================================================
MSG: qt_nuitrack_app/SkeletonInfo
#std_msgs/Header header
int32 id
JointInfo[] joints 

================================================================================
MSG: qt_nuitrack_app/JointInfo
#std_msgs/Header header
uint8 type
float32 confidence
float32[] real
float32[] projection
float32[] orientation
"""
  __slots__ = ['skeletons']
  _slot_types = ['qt_nuitrack_app/SkeletonInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       skeletons

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Skeletons, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.skeletons is None:
        self.skeletons = []
    else:
      self.skeletons = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.skeletons)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeletons:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.joints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joints:
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.type, _x.confidence))
          length = len(val2.real)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.real))
          length = len(val2.projection)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.projection))
          length = len(val2.orientation)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.skeletons is None:
        self.skeletons = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeletons = []
      for i in range(0, length):
        val1 = qt_nuitrack_app.msg.SkeletonInfo()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joints = []
        for i in range(0, length):
          val2 = qt_nuitrack_app.msg.JointInfo()
          _x = val2
          start = end
          end += 5
          (_x.type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.real = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.projection = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.orientation = s.unpack(str[start:end])
          val1.joints.append(val2)
        self.skeletons.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.skeletons)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeletons:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.joints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joints:
          _x = val2
          buff.write(_get_struct_Bf().pack(_x.type, _x.confidence))
          length = len(val2.real)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.real.tostring())
          length = len(val2.projection)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.projection.tostring())
          length = len(val2.orientation)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.orientation.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.skeletons is None:
        self.skeletons = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeletons = []
      for i in range(0, length):
        val1 = qt_nuitrack_app.msg.SkeletonInfo()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joints = []
        for i in range(0, length):
          val2 = qt_nuitrack_app.msg.JointInfo()
          _x = val2
          start = end
          end += 5
          (_x.type, _x.confidence,) = _get_struct_Bf().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.real = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.projection = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          val1.joints.append(val2)
        self.skeletons.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
