// Generated by gencpp from file qt_nuitrack_app/JointInfo.msg
// DO NOT EDIT!


#ifndef QT_NUITRACK_APP_MESSAGE_JOINTINFO_H
#define QT_NUITRACK_APP_MESSAGE_JOINTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qt_nuitrack_app
{
template <class ContainerAllocator>
struct JointInfo_
{
  typedef JointInfo_<ContainerAllocator> Type;

  JointInfo_()
    : type(0)
    , confidence(0.0)
    , real()
    , projection()
    , orientation()  {
    }
  JointInfo_(const ContainerAllocator& _alloc)
    : type(0)
    , confidence(0.0)
    , real(_alloc)
    , projection(_alloc)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _real_type;
  _real_type real;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _projection_type;
  _projection_type projection;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> const> ConstPtr;

}; // struct JointInfo_

typedef ::qt_nuitrack_app::JointInfo_<std::allocator<void> > JointInfo;

typedef boost::shared_ptr< ::qt_nuitrack_app::JointInfo > JointInfoPtr;
typedef boost::shared_ptr< ::qt_nuitrack_app::JointInfo const> JointInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qt_nuitrack_app::JointInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qt_nuitrack_app::JointInfo_<ContainerAllocator1> & lhs, const ::qt_nuitrack_app::JointInfo_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.confidence == rhs.confidence &&
    lhs.real == rhs.real &&
    lhs.projection == rhs.projection &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qt_nuitrack_app::JointInfo_<ContainerAllocator1> & lhs, const ::qt_nuitrack_app::JointInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qt_nuitrack_app

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52ccea37fd6730979bc7bbe9557a5b06";
  }

  static const char* value(const ::qt_nuitrack_app::JointInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52ccea37fd673097ULL;
  static const uint64_t static_value2 = 0x9bc7bbe9557a5b06ULL;
};

template<class ContainerAllocator>
struct DataType< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qt_nuitrack_app/JointInfo";
  }

  static const char* value(const ::qt_nuitrack_app::JointInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#std_msgs/Header header\n"
"uint8 type\n"
"float32 confidence\n"
"float32[] real\n"
"float32[] projection\n"
"float32[] orientation\n"
;
  }

  static const char* value(const ::qt_nuitrack_app::JointInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.confidence);
      stream.next(m.real);
      stream.next(m.projection);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qt_nuitrack_app::JointInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qt_nuitrack_app::JointInfo_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "real[]" << std::endl;
    for (size_t i = 0; i < v.real.size(); ++i)
    {
      s << indent << "  real[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.real[i]);
    }
    s << indent << "projection[]" << std::endl;
    for (size_t i = 0; i < v.projection.size(); ++i)
    {
      s << indent << "  projection[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.projection[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.orientation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QT_NUITRACK_APP_MESSAGE_JOINTINFO_H
