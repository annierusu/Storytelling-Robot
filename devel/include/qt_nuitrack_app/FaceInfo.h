// Generated by gencpp from file qt_nuitrack_app/FaceInfo.msg
// DO NOT EDIT!


#ifndef QT_NUITRACK_APP_MESSAGE_FACEINFO_H
#define QT_NUITRACK_APP_MESSAGE_FACEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qt_nuitrack_app
{
template <class ContainerAllocator>
struct FaceInfo_
{
  typedef FaceInfo_<ContainerAllocator> Type;

  FaceInfo_()
    : id(0)
    , gender()
    , age_years(0)
    , age_type()
    , emotion_neutral(0.0)
    , emotion_angry(0.0)
    , emotion_happy(0.0)
    , emotion_surprise(0.0)
    , rectangle()
    , left_eye()
    , right_eye()
    , angles()  {
    }
  FaceInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , gender(_alloc)
    , age_years(0)
    , age_type(_alloc)
    , emotion_neutral(0.0)
    , emotion_angry(0.0)
    , emotion_happy(0.0)
    , emotion_surprise(0.0)
    , rectangle(_alloc)
    , left_eye(_alloc)
    , right_eye(_alloc)
    , angles(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gender_type;
  _gender_type gender;

   typedef int32_t _age_years_type;
  _age_years_type age_years;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _age_type_type;
  _age_type_type age_type;

   typedef double _emotion_neutral_type;
  _emotion_neutral_type emotion_neutral;

   typedef double _emotion_angry_type;
  _emotion_angry_type emotion_angry;

   typedef double _emotion_happy_type;
  _emotion_happy_type emotion_happy;

   typedef double _emotion_surprise_type;
  _emotion_surprise_type emotion_surprise;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _rectangle_type;
  _rectangle_type rectangle;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _left_eye_type;
  _left_eye_type left_eye;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _right_eye_type;
  _right_eye_type right_eye;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _angles_type;
  _angles_type angles;





  typedef boost::shared_ptr< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> const> ConstPtr;

}; // struct FaceInfo_

typedef ::qt_nuitrack_app::FaceInfo_<std::allocator<void> > FaceInfo;

typedef boost::shared_ptr< ::qt_nuitrack_app::FaceInfo > FaceInfoPtr;
typedef boost::shared_ptr< ::qt_nuitrack_app::FaceInfo const> FaceInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator1> & lhs, const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.gender == rhs.gender &&
    lhs.age_years == rhs.age_years &&
    lhs.age_type == rhs.age_type &&
    lhs.emotion_neutral == rhs.emotion_neutral &&
    lhs.emotion_angry == rhs.emotion_angry &&
    lhs.emotion_happy == rhs.emotion_happy &&
    lhs.emotion_surprise == rhs.emotion_surprise &&
    lhs.rectangle == rhs.rectangle &&
    lhs.left_eye == rhs.left_eye &&
    lhs.right_eye == rhs.right_eye &&
    lhs.angles == rhs.angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator1> & lhs, const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qt_nuitrack_app

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b210720ecbe10f5a0a7a3911214f766a";
  }

  static const char* value(const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb210720ecbe10f5aULL;
  static const uint64_t static_value2 = 0x0a7a3911214f766aULL;
};

template<class ContainerAllocator>
struct DataType< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qt_nuitrack_app/FaceInfo";
  }

  static const char* value(const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#std_msgs/Header header\n"
"int32 id\n"
"string gender\n"
"int32 age_years\n"
"string age_type\n"
"float64 emotion_neutral\n"
"float64 emotion_angry\n"
"float64 emotion_happy\n"
"float64 emotion_surprise\n"
"#normalized screen coordinates of a face rectangle in the image (x, y, w, h)\n"
"float64[] rectangle\n"
"#normalized coordinates of the center of a person’s left eye (x,y)\n"
"float64[] left_eye\n"
"#normalized coordinates of the center of a person’s right eye (x,y)\n"
"float64[] right_eye\n"
"#face orientation angles in degrees (yaw, pitch, roll)\n"
"float64[] angles\n"
;
  }

  static const char* value(const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.gender);
      stream.next(m.age_years);
      stream.next(m.age_type);
      stream.next(m.emotion_neutral);
      stream.next(m.emotion_angry);
      stream.next(m.emotion_happy);
      stream.next(m.emotion_surprise);
      stream.next(m.rectangle);
      stream.next(m.left_eye);
      stream.next(m.right_eye);
      stream.next(m.angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qt_nuitrack_app::FaceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qt_nuitrack_app::FaceInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "gender: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gender);
    s << indent << "age_years: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age_years);
    s << indent << "age_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.age_type);
    s << indent << "emotion_neutral: ";
    Printer<double>::stream(s, indent + "  ", v.emotion_neutral);
    s << indent << "emotion_angry: ";
    Printer<double>::stream(s, indent + "  ", v.emotion_angry);
    s << indent << "emotion_happy: ";
    Printer<double>::stream(s, indent + "  ", v.emotion_happy);
    s << indent << "emotion_surprise: ";
    Printer<double>::stream(s, indent + "  ", v.emotion_surprise);
    s << indent << "rectangle[]" << std::endl;
    for (size_t i = 0; i < v.rectangle.size(); ++i)
    {
      s << indent << "  rectangle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rectangle[i]);
    }
    s << indent << "left_eye[]" << std::endl;
    for (size_t i = 0; i < v.left_eye.size(); ++i)
    {
      s << indent << "  left_eye[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.left_eye[i]);
    }
    s << indent << "right_eye[]" << std::endl;
    for (size_t i = 0; i < v.right_eye.size(); ++i)
    {
      s << indent << "  right_eye[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.right_eye[i]);
    }
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QT_NUITRACK_APP_MESSAGE_FACEINFO_H
