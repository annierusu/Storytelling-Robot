// Generated by gencpp from file qt_gesture_controller/gesture_listResponse.msg
// DO NOT EDIT!


#ifndef QT_GESTURE_CONTROLLER_MESSAGE_GESTURE_LISTRESPONSE_H
#define QT_GESTURE_CONTROLLER_MESSAGE_GESTURE_LISTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qt_gesture_controller
{
template <class ContainerAllocator>
struct gesture_listResponse_
{
  typedef gesture_listResponse_<ContainerAllocator> Type;

  gesture_listResponse_()
    : gestures()
    , status(false)  {
    }
  gesture_listResponse_(const ContainerAllocator& _alloc)
    : gestures(_alloc)
    , status(false)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _gestures_type;
  _gestures_type gestures;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> const> ConstPtr;

}; // struct gesture_listResponse_

typedef ::qt_gesture_controller::gesture_listResponse_<std::allocator<void> > gesture_listResponse;

typedef boost::shared_ptr< ::qt_gesture_controller::gesture_listResponse > gesture_listResponsePtr;
typedef boost::shared_ptr< ::qt_gesture_controller::gesture_listResponse const> gesture_listResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator1> & lhs, const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator2> & rhs)
{
  return lhs.gestures == rhs.gestures &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator1> & lhs, const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qt_gesture_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fff31f89d10c3103fdbdb3a5212feb94";
  }

  static const char* value(const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfff31f89d10c3103ULL;
  static const uint64_t static_value2 = 0xfdbdb3a5212feb94ULL;
};

template<class ContainerAllocator>
struct DataType< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qt_gesture_controller/gesture_listResponse";
  }

  static const char* value(const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] gestures\n"
"bool status\n"
"\n"
;
  }

  static const char* value(const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gestures);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gesture_listResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qt_gesture_controller::gesture_listResponse_<ContainerAllocator>& v)
  {
    s << indent << "gestures[]" << std::endl;
    for (size_t i = 0; i < v.gestures.size(); ++i)
    {
      s << indent << "  gestures[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gestures[i]);
    }
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QT_GESTURE_CONTROLLER_MESSAGE_GESTURE_LISTRESPONSE_H
