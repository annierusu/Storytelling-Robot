// Generated by gencpp from file qt_motors_controller/MotorState.msg
// DO NOT EDIT!


#ifndef QT_MOTORS_CONTROLLER_MESSAGE_MOTORSTATE_H
#define QT_MOTORS_CONTROLLER_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qt_motors_controller
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : name()
    , temperature()
    , voltage()  {
    }
  MotorState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , temperature(_alloc)
    , voltage(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_type;
  _name_type name;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _temperature_type;
  _temperature_type temperature;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _voltage_type;
  _voltage_type voltage;





  typedef boost::shared_ptr< ::qt_motors_controller::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qt_motors_controller::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::qt_motors_controller::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::qt_motors_controller::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::qt_motors_controller::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qt_motors_controller::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qt_motors_controller::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qt_motors_controller::MotorState_<ContainerAllocator1> & lhs, const ::qt_motors_controller::MotorState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.temperature == rhs.temperature &&
    lhs.voltage == rhs.voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qt_motors_controller::MotorState_<ContainerAllocator1> & lhs, const ::qt_motors_controller::MotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qt_motors_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qt_motors_controller::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt_motors_controller::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_motors_controller::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_motors_controller::MotorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_motors_controller::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_motors_controller::MotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qt_motors_controller::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8e09c6156fe0a406db90d8632033e1e";
  }

  static const char* value(const ::qt_motors_controller::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8e09c6156fe0a40ULL;
  static const uint64_t static_value2 = 0x6db90d8632033e1eULL;
};

template<class ContainerAllocator>
struct DataType< ::qt_motors_controller::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qt_motors_controller/MotorState";
  }

  static const char* value(const ::qt_motors_controller::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qt_motors_controller::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#std_msgs/Header header\n"
"string[] name\n"
"float32[] temperature\n"
"float32[] voltage\n"
;
  }

  static const char* value(const ::qt_motors_controller::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qt_motors_controller::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.temperature);
      stream.next(m.voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qt_motors_controller::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qt_motors_controller::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "temperature[]" << std::endl;
    for (size_t i = 0; i < v.temperature.size(); ++i)
    {
      s << indent << "  temperature[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temperature[i]);
    }
    s << indent << "voltage[]" << std::endl;
    for (size_t i = 0; i < v.voltage.size(); ++i)
    {
      s << indent << "  voltage[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.voltage[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QT_MOTORS_CONTROLLER_MESSAGE_MOTORSTATE_H
