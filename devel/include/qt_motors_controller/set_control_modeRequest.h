// Generated by gencpp from file qt_motors_controller/set_control_modeRequest.msg
// DO NOT EDIT!


#ifndef QT_MOTORS_CONTROLLER_MESSAGE_SET_CONTROL_MODEREQUEST_H
#define QT_MOTORS_CONTROLLER_MESSAGE_SET_CONTROL_MODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qt_motors_controller
{
template <class ContainerAllocator>
struct set_control_modeRequest_
{
  typedef set_control_modeRequest_<ContainerAllocator> Type;

  set_control_modeRequest_()
    : parts()
    , mode(0)  {
    }
  set_control_modeRequest_(const ContainerAllocator& _alloc)
    : parts(_alloc)
    , mode(0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _parts_type;
  _parts_type parts;

   typedef uint8_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(M_ON)
  #undef M_ON
#endif
#if defined(_WIN32) && defined(M_OFF)
  #undef M_OFF
#endif
#if defined(_WIN32) && defined(M_BREAK)
  #undef M_BREAK
#endif

  enum {
    M_ON = 0u,
    M_OFF = 1u,
    M_BREAK = 2u,
  };


  typedef boost::shared_ptr< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_control_modeRequest_

typedef ::qt_motors_controller::set_control_modeRequest_<std::allocator<void> > set_control_modeRequest;

typedef boost::shared_ptr< ::qt_motors_controller::set_control_modeRequest > set_control_modeRequestPtr;
typedef boost::shared_ptr< ::qt_motors_controller::set_control_modeRequest const> set_control_modeRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator1> & lhs, const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.parts == rhs.parts &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator1> & lhs, const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qt_motors_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54b160c35442a5d4531dbe67c76c84be";
  }

  static const char* value(const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54b160c35442a5d4ULL;
  static const uint64_t static_value2 = 0x531dbe67c76c84beULL;
};

template<class ContainerAllocator>
struct DataType< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qt_motors_controller/set_control_modeRequest";
  }

  static const char* value(const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# constants\n"
"uint8 M_ON=0\n"
"uint8 M_OFF=1\n"
"uint8 M_BREAK=2\n"
"\n"
"# an array of robot parts and/or single joint name (e.g. ['left_arm', 'right_arm', 'HeadPitch'])\n"
"string[] parts\n"
"uint8  mode\n"
;
  }

  static const char* value(const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parts);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_control_modeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qt_motors_controller::set_control_modeRequest_<ContainerAllocator>& v)
  {
    s << indent << "parts[]" << std::endl;
    for (size_t i = 0; i < v.parts.size(); ++i)
    {
      s << indent << "  parts[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.parts[i]);
    }
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QT_MOTORS_CONTROLLER_MESSAGE_SET_CONTROL_MODEREQUEST_H
